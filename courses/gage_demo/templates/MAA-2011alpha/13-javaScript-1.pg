####	13-javaSript-1.pg
# DESCRIPTION
#	Oracle function: compute values using JavaScript
# ENDDESCRIPTION

## DBsubject('WeBWorK')
## DBchapter('WeBWorK Tutorial')
## DBsection('MAA Tutorial')
## KEYWORDS('MathObjects','JavaScript','derivative')
## Author('Mike Gage, Dick Lane')
## Institution('U Rochester, U Montana')
## Date('05/19/2011)

DOCUMENT();	# First executable line in the problem

loadMacros(
	"PGstandard.pl",
	"MathObjects.pl",
	"PGcourse.pl",
);

TEXT(beginproblem());

####	title for this tutorial example
TEXT($BBOLD, $BCENTER,
	"JavaScript example --- function visible in HTML source",
	$ECENTER, $EBOLD, $BR );

#	define function to be evaluated
$a = random(1,3,1);
$b = random(-4,4,.1);
$c = random(-4,4,1);
$f  = Formula( "$a x^2 + $b x + $c" ) -> reduce ;
$fp = $f -> D -> reduce ;

$x0  = random(-2,2,1);
$ans = $fp -> eval( x => $x0) ;


#	This text will be placed in the header section of the HTML page
#	not in the body where TEXT output is placed.
HEADER_TEXT(<<EOF);
<SCRIPT LANGUAGE="JavaScript">
<!-- Begin
	function func(x) {return( ($a*x + $b)*x + $c );}
-->
</SCRIPT>
EOF
####	A savy student will be able to tell to read that obvious formula
####	by looking at the HTML source of their window.
####	A variant of this example uses a cubic spline to obfuscate that info.


####	MODES allows displayed content to vary with type of output
TEXT(MODES( TeX => "",
 Latex2HTML => "\begin{rawhtml}
	<NOSCRIPT>This problem requires that Java Script be enabled
		</NOSCRIPT> ~~n\end{rawhtml}",
 HTML_tth =>
    "<NOSCRIPT>This problem requires that javaScript be enabled</NOSCRIPT>~~n",
 HTML =>
    "<NOSCRIPT>This problem requires that javaScript be enabled</NOSCRIPT> ~~n"
));

####	MODES allows displayed content to vary with type of output
$functionArrow = MODES(
	TeX => "\(- f\rightarrow\)",
	Latex2HTML => "\(- f\rightarrow \) ",
	HTML_tth => "-- f -- &gt; &nbsp; ",
	HTML => '-- f -- &gt; &nbsp; '
);

#	The following string contains a combination of HTML and javaScript
#	which displays the input table for the javaScript calculator
####	This Perl construct is a "here-document" which puts several lines
####	into a named string: "<<" begins it, "EndOfScript" marks boundaries.
$javaScript =<<EndOfScript;
<CENTER>
<TABLE BORDER=4>
<TR>
<TD>
<INPUT TYPE="text"   NAME="Input1"  Value = "$x0" Size="20">
</TD>
<TD>
<INPUT TYPE="button" VALUE="---f--&gt;"
            OnClick="this.form.Output1.value=func(this.form.Input1.value)">
</TD>
<TD>
<INPUT TYPE="text"   NAME="Output1"   Size="20">
</TD>
</TR>
<TR>
<TD>
<INPUT TYPE="text"   NAME="Input2"  Value = "$x0" Size="20">
</TD>
<TD>
<INPUT TYPE="button" VALUE="---f--&gt;"
            OnClick="this.form.Output2.value=func(this.form.Input2.value)">
</TD>
<TD>
<INPUT TYPE="text"   NAME="Output2"   Size="20">
</TD>
</TR>
<TR>
<TD>
<INPUT TYPE="text"   NAME="Input3"  Value = "$x0" Size="20">
</TD>
<TD>
<INPUT TYPE="button" VALUE="---f--&gt;"
            OnClick="this.form.Output3.value=func(this.form.Input3.value)">
</TD>
<TD>
<INPUT TYPE="text"   NAME="Output3"   Size="20">
</TD>
</TR>
</TABLE>

</CENTER>
EndOfScript
####	This second use of "EndOfScript" terminates the "here-document".


####	$LQ = ${LQ} is left quote, $RQ = ${RQ} is right quote
####	$BITALIC and $EITALIC are markup to begin/end italic (aka <em>, </em>)
BEGIN_TEXT
	This problem provides information about \( f(x) \) via an
	${LQ}oracle function${RQ}
	[${BITALIC}if you ask, it will tell${EITALIC}].

	Enter a numerical value in a lefthand box, press the middle button, and
	the corresponding function value is displayed in the righthand box.
END_TEXT

#	Actually display the javaScript calculator form on active webpage,
#	but use alternative text for printed output.
TEXT( MODES(
	HTML =>  $javaScript,
	TeX  => " \fbox{The Oracle function is available on the webpage.}",
	)
 );

####	resume with description of the task
BEGIN_TEXT
$BR
	Estimate one value for the derivative of this function.
$BCENTER
	\(f^\prime( $x0 )  \; \approx \; \)	\{ ans_rule(50) \}
$ECENTER
END_TEXT

BEGIN_HINT
	You can enter a numerical expression into the answer box and
	let WeBWorK do the arithmetic.
END_HINT

#	We are allowing 1 percent error for the answer.
ANS( num_cmp( $ans , reltol => 1 ) );

ENDDOCUMENT();
