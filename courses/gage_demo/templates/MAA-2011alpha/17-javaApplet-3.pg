####	17-javaApplet-3.pg
# DESCRIPTION
#	Java applet gives coordinates on a map, student computes distances
# ENDDESCRIPTION

## DBsubject('WeBWorK')
## DBchapter('WeBWorK Tutorial')
## DBsection('MAA Tutorial')
## KEYWORDS('MathObjects','AppletObjects','Java','applet')
## Author('Mike Gage, Dick Lane')
## Institution('U Rochester, U Montana')
## Date('05/20/2011)

####	Image_and_Cursor is a lite applet designed by Frank Wattenberg.
## SeeAlso('https://www.math.duke.edu/education/webfeatsII/Lite_Applets/Image_and_Cursor/')


DOCUMENT();	# first executable line of this problem

loadMacros(
	"PGstandard.pl",
  ##	"MathObjects.pl",
	"AppletObjects.pl",
	"PGchoicemacros.pl",	####	provides NchooseK
	"PGcourse.pl",
);

####	display problem number and available points
TEXT(beginproblem());

####	title for this tutorial example
TEXT($BCENTER, $BBOLD,
	"Java applet for interactive exercise --- random questions",
	$EBOLD, $ECENTER) ;


####	create link to applet, specify parameters and options
$appletName = "Image_and_Cursor" ;
$Applet = new JavaApplet(
    code	=> "$appletName" ,
    codebase	=> findAppletCodebase("$appletName.jar"),
    archive	=> "$appletName.jar" ,
    appletName	=> $appletName ,
    width	=> 500 ,
    height	=> 458 ,
    params	=> {
	applet_width	=> 500 ,
	applet_height	=> 458 ,
	image_width	=> 351 ,
	image_height	=> 378 ,
	backdrop_filename =>
		"/webwork2_files/applets/Image_and_Cursor_All/AF-MAP.JPG" ,
	display_placement => 1 ,
	display_sw	=> 0 ,
	}
) ;
####	dimensions agree with recommendation in applet documention, BUT
####	applet width & height fail with Firefox 3 --- coordinates not shown

####	include applet for live webpage, but show a screenshot in hardcopy
TEXT( MODES(
	HTML => $Applet -> insertAll() ,
	TeX  => image( "16-javaApplet-2.png" ,
			width => 445, height => 424, tex_size => 500 ) ,
	)
) ;

####	location is map coordinates in pixels
@cities = (
	{ name => 'Kandahar',		location => [132, 101] },
	{ name => 'Kabul',		location => [209, 185] },
	{ name => 'Mazur e Sharif',	location => [170, 243] },
	{ name => 'Shindand',		location => [ 46, 155] },
	{ name => 'Zaranj',		location => [ 39,  93] }
);

####	NchooseK( n , k )  yields array of k distinct items randomly chosen
####		from {0, 1, ..., n-1}  [Perl indexing starts at 0.]
####	scalar  yields number of items in an array
@index  = NchooseK( scalar(@cities) , 3 );

####	Perl functions to extract components:
sub cityName {
     my $index = shift ;
    $cities[$index]->{name};
}

sub cityLoc {
    my $index = shift;
    $cities[$index]->{location};
}


BEGIN_TEXT
$BR
	How far is it from \{cityName($index[0])\} to \{cityName($index[1])\}?
	\{ ans_rule() \}	\{ helpLink('units') \}
$BR
	How far is it from \{cityName($index[1])\} to \{cityName($index[2])\}?
	\{ ans_rule() \}	\{ helpLink('units') \}
$BR
	How far is it from \{cityName($index[2])\} to \{cityName($index[0])\}?
	\{ ans_rule() \}	\{ helpLink('units') \}
END_TEXT


####################	perhaps display HowTo near the end	##########

####	Perl's operator to concatenate strings is "."
####	It is used here to avoid wrapping the 3 long strings in this source.
@HowToUse = ( "Click anyplace on the map to move the cursor to that point." ,
"Location of the cursor is displayed at the upper-right,"
	.  " measured in pixels from the lower left corner of the map." ,
"You can fine tune the location of the cursor by clicking on the four arrows"
	. " at the left, right, top, and bottom of the map.  Each click moves"
	. " the cursor one pixel in the direction indicated by the arrow." ,
"Use the scale printed at the bottom of the map to determine how to"
	. " convert distances measured on the map in pixels to distances on"
	. " the ground measured in miles or kilometers."
) ;

####	WeBWorK's OL macro displays an Ordered List of those 4 strings
TEXT($BR, $BR, $BCENTER, "Tips on using this applet", $ECENTER,
	OL( @HowToUse ) ) ;


####################	check answers    ####################

$showPartialCorrectAnswers = 1 ;	####	feedback for each answer

sub  dist {
    my $pt1 = shift;
    my $pt2 = shift;
    my $cnv = 300 /(145 - 72);		# number of km per pixel
   return $cnv*sqrt( ($pt1->[0] - $pt2->[0])**2 + ($pt1->[1] - $pt2->[1])**2);
}

####	relative tolerance for checking is 3%
ANS( num_cmp( dist( cityLoc($index[0]) , cityLoc($index[1]) ) ,
		reltol => 3, units => 'km' ) ) ;
ANS( num_cmp( dist( cityLoc($index[1]) , cityLoc($index[2]) ) ,
		reltol => 3, units => 'km' ) ) ;
ANS( num_cmp( dist( cityLoc($index[2]) , cityLoc($index[0]) ) ,
		reltol => 3, units => 'km' ) ) ;


ENDDOCUMENT();		# Last EXECUTABLE line of this problem

Some more exercises
a)  consider decreasing approximation tolerance after using the Mile scale,
	but still accepting valid answers using any recognized units
b)  what hints
c)  what information to present in a solution?  and   what computations?
