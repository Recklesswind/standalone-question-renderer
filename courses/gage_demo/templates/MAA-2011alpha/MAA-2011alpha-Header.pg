DOCUMENT();

loadMacros( "PGbasicmacros.pl", );

TEXT($BEGIN_ONE_COLUMN);

TEXT(MODES(TeX =>EV3(<<'EOT'), HTML=>"", Latex2HTML=>"" ));
\noindent {\large \bf $studentName}
\hfill
\noindent {\large \bf MAA Tutorial --- 2011 alpha version}
\hrule
EOT


##################
# EDIT BELOW HERE
##################

BEGIN_TEXT
	Here is a synopsis of the tutorial examples presented in this set.
	They have been designed for learning the PG language and its
	MathObjects extension --- they are not necessarily the best questions
	to use for mathematics instruction.
$PAR
$BBOLD 1. Standard example: $EBOLD
	    One part asks for a numerical answer and the other requires a
	functional expression.  Many problems for a precalculus or calculus
	course are constructed using only these simple tasks
	(see below for a variety of techniques to use graphs).
	    ${BITALIC}MathObjects${EITALIC} simplify this problem considerably,
	particularly the second question asking for a derivative.
$PAR

$BBOLD 2. Hello ... : $EBOLD
	Illustrates the basic structure of a PG problem with a text answer.
	Modifications using MathObjects don't simplify this problem much, but
	they provide for better student feedback when the word answer is
	incorrect.
$PAR

$BBOLD 3. Multiple Choice --- Perl list: $EBOLD
	Uses lists (arrays) to implement a multiple choice question. This uses
	"barebones" Perl and a few basic macros to create the problem.
	It's the assembly language version of the question.
$PAR

$BBOLD 4. Multiple Choice --- radio button: $EBOLD
	Uses the multiple choice object to implement a multiple choice
	question --- answer specified by selecting a radio button.
$PAR

$BBOLD 5. Multiple Choice --- checkbox: $EBOLD
	Allows more than one correct answer to be supplied ---
	answer(s) specified with checkboxes, all-or-nothing grading.
$PAR

$BBOLD 6. True/False --- text entry:  $EBOLD
	Uses the TF context to allow text answer to be single letter
	(T or F) or full word (True or False).
$PAR

$BBOLD 7. True/False --- Pop-up choice: $EBOLD
	Answers are chosen from pop-up lists.
$PAR

$BBOLD 8. Matching lists --- text entry: $EBOLD
$PAR

$BBOLD 9. Matching lists --- popup choice: $EBOLD
	Two column display on screen
$PAR

$BBOLD 10. Matching lists --- static graphs: $EBOLD
	Function given graphically; match formulas for transformations
	with their graph.  (Example 19 is similar, but with dynamic graphs.)
$PAR

$BBOLD 11. On-the-fly graphics --- 1: $EBOLD
	Figure shows function and its derivatives.  Task: identify each.
$PAR

$BBOLD 12. On-the-fly-graphics --- 2: $EBOLD
	Figure shows function and its derivatives ---
	colors and labels are scrambled; same task.
$PAR

$BBOLD 13. JavaScript --- 1: $EBOLD
	Estimate value of a derivative using an "oracle" function.
	Code is written "in clear" into the webpage.
$PAR

$BBOLD 14. JavaScript --- 2: $EBOLD
	A variant of the previous example which obfuscates the example function
	as a cubic spline so that students can't read the javaScript code to
	find out the answer.
$PAR

$BBOLD 15. Java applet --- 1: $EBOLD
	Applet presents graph with sliders for 2 parameters.
	Students can explore a task; first part asks for 3 numerical answers,
	but last question asks for a functional relationship.
$PAR

$BBOLD 16. Java applet --- 2: $EBOLD
	Use applet to find map coordinates, then do computation of distances.
	Note: examples of HTML links are included here.
$PAR

$BBOLD 17. Java applet --- 3: $EBOLD
	mild variant of preceding --- cities chosen randomly,
	help about the applet appears below the questions
$PAR

$BBOLD 18. Conditional Questions: $EBOLD
	Illustrates one method to create a problem which first asks an easy
	question, and once that has been answered correctly, follows up with a
	more involved question on the same material.
$PAR

$BBOLD 19. Slope Field: $EBOLD
	Match various differential equations with their slope fields
	--- dynamically generatated graphs
	(for ODEs with mildly varying parameters).
$PAR

$BBOLD 20. Spline fits to data: $EBOLD
	Demonstration of some numerical and graphical macros.
$HR

Edited by Dick Lane 2011
END_TEXT

##################
# EDIT ABOVE HERE
##################

TEXT($END_ONE_COLUMN);

#########################################################>>>
ENDDOCUMENT();        # This should be the last executable line in the problem.
