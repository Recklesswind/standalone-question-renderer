##  First Homework Problem File for
##  Calculus
##  Partial Derivatives
##  Unit 1
## 

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
);

TEXT(beginproblem());

Context("Numeric")->variables->add(y=>"Real",term=>"Real",t=>"Real",r=>"Real");

$pow = random(2,8,2);
$powp1 = $pow + 1;
$c = random(3,9,1);
$d = pi;

$f1 = Formula("$pow*(x**$powp1 - y**$powp1)/(x**$pow + y**$pow)");
$f2 = Formula("(x**$pow - $powp1*y**$pow)/(x**$pow + y**$pow)");
$f3 = Formula("$pow*(x**$pow - y**$pow)/(x**$pow + y**$pow)");
$f4 = Formula("($c*x*y)/(x + y)");
$f5a = Formula("sin((x+y+t))/(x+y)");
$f5 = $f5a->substitute(t=>Formula("pi"));
$f6 = Formula("(x**$pow - y**$pow)/(x**$pow + y**$pow-2)");
$ans1 = Compute(0);
$ans2 = Compute("NONE");
$ans3 = Compute("$pow");
$ans4 = Compute("NONE");
$ans5 = Compute("-1");
$ans6 = Compute("NONE");

$sol1 = Formula("r*$pow*(cos(t)**$powp1 - sin(t)**$powp1)/(cos(t)**$pow + sin(t)**$pow)");
$sol2 = Formula("(cos(t)**$pow - $powp1*sin(t)**$pow)/(cos(t)**$pow + sin(t)**$pow)");

####################################################

TEXT(<<'EOF');
<div id="singlecell-test"><script type="text/code">

#  Starting point for radius values before collapsing in as R approaches 0.
#  Functions ought to be "reasonable" within a circular domain of radius R surrounding 
#  the desired (x_0,y_0).
var('x,y,z')
Rmin=1/10
Rmax=2
@interact(layout=dict(top=[['f'],['x0'],['y0']], 
bottom=[['in_3d','curves','R']]))
def _(f=input_box((x^2-y^2)/(x^2+y^2),width=30,label='$f(x)$'),
        R=slider(Rmin,Rmax,1/10,Rmax,label=',   $R$'),
        x0=input_box(0,width=10,label='$x_0$'),
        y0=input_box(0,width=10,label='$y_0$'),
        curves=checkbox(default=false,label='Show curves'),
        in_3d=checkbox(default=false,label='3D')):

#   converting f to cylindrical coordinates.  
    g(r,t) = f(x=r*cos(t)+x0,y=r*sin(t)+y0)

#   Sage graphing transformation used to see the original surface.
    cylinder = (r*cos(t)+x0,r*sin(t)+y0,z)
    surface = plot3d(g,(t,0,2*pi),(r,1/100,Rmax),transformation=cylinder,opacity=0.2)
    
#   Regraph the surface for smaller and smaller radii controlled by the slider.
    collapsing_surface = plot3d(g,(t,0,2*pi),(r,1/100,R),transformation=cylinder,rgbcolor=(0,1,0))
    
    G = surface+collapsing_surface
    html('Enter $(x_0 ,y_0 )$ above and see what happens as $ R \\rightarrow 0 $.')
    html('The surface has a limit as $(x,y) \\rightarrow $ ('+str(x0)+','+str(y0)+') if the green region collapses to a point.')

#   If checked, add a couple of curves on the surface corresponding to limit as x->x0 for y=x^(3/5),
#   and as y->y0 for x=y^(3/5).  Should make this more robust but perhaps using 
#   these relatively obtuse curves could eliminate problems.
    
    if curves:
        curve_x = parametric_plot3d([x0-t,y0-t^(3/5),f(x=x0-t,y=y0-t^(3/5))],(t,Rmin,Rmax),color='red')
        curve_y = parametric_plot3d([x0+t^(3/5),y0+t,f(x=x0+t^(3/5),y=y0+t)],(t,Rmin,Rmax),color='red')
        G += curve_x+curve_y    
        limit_x = limit(f(x=x0-t,y=y0-t^(3/5)),t=0)
        limit_y = limit(f(x=x0+t^(3/5),y=y0+t),t=0)  
        html('The red curves represent a couple of trajectories on the surface.  If they do not meet, then')
        html('there is also no limit.  (If computer hangs up, likely the computer can not do these limits.)')
        html('\n<center><font color="red">$\lim_{(x,?)\\rightarrow(x_0,y_0)} f(x,y) =%s$</font>'%str(limit_x)+'  and <font color="red">$\lim_{(?,y)\\rightarrow(x_0,y_0)} f(x,y) =%s$</font></center>'%str(limit_y))
        
    if in_3d:
        show(G,stereo="redcyan")
    else:
        show(G,perspective_depth=true)
</script></div>

   <script type="text/javascript" src="http://sagemath.org:5467/static/jquery-1.5.min.js"></script>
   <script type="text/javascript" src="http://sagemath.org:5467/embedded_singlecell.js"></script>

   <script type="text/javascript">
$(function() { // load only when the page is loaded
  var makecells = function() {
  singlecell.makeSinglecell({
      inputLocation: "#singlecell-test",
      editor: "codemirror",
      hide: ["editor","computationID","files","messages","sageMode"],
      evalButtonText: "Start/Restart",
      replaceOutput: true});
  }

  singlecell.init(makecells); // load Single Cell libraries and then
                              // initialize Single Cell instances

  });
  </script>
EOF

TEXT(beginproblem());

####################################################
#
# The items below are printed out only when set is displayed on screen
# 
####################################################
TEXT(MODES(TeX =>"",HTML=>EV3(<<'EOT')));


Determining 
\[ \lim_{(x,y)\rightarrow(x_0,y_0)} f(x,y) \] 
by definition can often be very difficult.  The interactive worksheet below allows the user to visualize this problem using a polar coordinates approach.  Such an approach attempts to squeeze the domain values \((x,y)\) about the point of interest \((x_0,y_0)\).  If the range values on the surface are then subsequently squeezed to a point, then the function has a limit of this common value.  If not, then no limit will exist.
$PAR
Use the worksheet below to determine an appropriate value for each limit or exhibit multiple limit points.  If no limit exists, enter NONE.  
$PAR
You will need to have a login/password for this sage server to work this problem.  Contact travis AT mc.edu if you need one.
\{ begintable(6) \}
\{ row( "\[ \lim_{(x,y)\rightarrow(0,0)} $f1 = \]", ans_rule(10) ) \}
\{ row( "\[ \lim_{(x,y)\rightarrow(0,0)} $f2 = \]", ans_rule(10) ) \}
\{ row( "\[ \lim_{(x,y)\rightarrow(1,0)} $f3 = \]", ans_rule(10) ) \}
\{ row( "\[ \lim_{(x,y)\rightarrow(0,0)} $f4 = \]", ans_rule(10) ) \}
\{ row( "\[ \lim_{(x,y)\rightarrow(0,0)} $f5 = \]", ans_rule(10) ) \}
\{ row( "\[ \lim_{(x,y)\rightarrow(1,-1)} $f6 = \]", ans_rule(10) ) \}
\{ endtable() \}
$PAR

$BR
EOT

## Need to allow lower case NONE answers.  
## Also, need to make these even more interesting and perhaps a different
## limit point in x and y.

ANS(Compute($ans1)->cmp());
ANS(Compute($ans2)->cmp());
ANS(Compute($ans3)->cmp());
ANS(Compute($ans4)->cmp());
ANS(Compute($ans5)->cmp());
ANS(Compute($ans6)->cmp());

BEGIN_HINT
$PAR
A limit will exist provided the surface about the limit point 
\( (x_0,y_0) \) reduces to a single point as the radius \{ R \} approaches 0. If the surface does not reduce to a single point, then the limit does not exist.
$PAR
Also, limits along particular paths in space may exist around \( (x_0,y_0) \) but all of these have to agree for the multivariate limit to exist.  One can't possibly check all of the possible paths but if limits do not agree for some two paths approaching \( (x_0,y_0) \) , then there is no limit.
END_HINT

BEGIN_SOLUTION
$PAR
$BBOLD Partial Solution $EBOLD
$BR
For \[$f1\], do the polar substitution:
$BR
\[ x = r*cos(t) \]
\[ y = r*sin(t) \]
$BR
and simplify to get
\[ $sol1 \]
$BR
So long as the term with trig functions is not unbounded as t approaches 0, then the \( r \rightarrow 0 \) forces the limit to be zero.
$PAR
For the second limit, notice polar substitution now gives:
\[ $sol2 \]
and there is no \(r\) left to make the term get small.  Since different values
of the angle \(t\) can make this expression change, then there is no single value 
to approach and therefore there is no limit. 

$BR


END_SOLUTION

ENDDOCUMENT();        # This should be the last executable line in the problem.
